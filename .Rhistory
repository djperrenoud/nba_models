print(scatter_plot)
View(data)
scatter_plot <- ggplot(data, aes(x = Player, y = PTS, label = Player)) +
geom_point() +
geom_text_repel(size = 3, segment.size = 0.2, segment.color = "transparent") +  # Add player names as labels
labs(title = "PPG for NBA Players (2021-2022 Season)",
x = "Player",
y = "Points Per Game") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# Print scatterplot
print(scatter_plot)
scatter_plot <- ggplot(nba_data, aes(x = FG., y = PTS, label = Player)) +
geom_point() +
geom_text_repel(size = 3, segment.size = 0.2, segment.color = "transparent") +  # Add player names as labels
labs(title = "FG% vs PTS for NBA Players (2021-2022 Season)",
x = "Field Goal Percentage",
y = "Points Per Game") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
scatter_plot <- ggplot(data, aes(x = FG., y = PTS, label = Player)) +
geom_point() +
geom_text_repel(size = 3, segment.size = 0.2, segment.color = "transparent") +  # Add player names as labels
labs(title = "FG% vs PTS for NBA Players (2021-2022 Season)",
x = "Field Goal Percentage",
y = "Points Per Game") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# Print scatterplot
print(scatter_plot)
install.packages("plotly")
library(plotly)
scatter_plot <- ggplot(data, aes(x = FG., y = PTS, label = Player)) +
geom_point() +
geom_text_repel(size = 3, segment.size = 0.2, segment.color = "transparent") +  # Add player names as labels
labs(title = "FG% vs PTS for NBA Players (2021-2022 Season)",
x = "Field Goal Percentage",
y = "Points Per Game") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# Convert ggplot to plotly
scatter_plot_plotly <- ggplotly(scatter_plot, tooltip = "text")
# Print scatterplot
print(scatter_plot_plotly)
# Print scatterplot
print(scatter_plot_plotly)
# Create scatterplot with plotly
scatter_plot <- ggplot(nba_data, aes(x = FG_Percentage, y = PTS, label = Player)) +
geom_point() +
geom_text_repel(size = 3, segment.size = 0.2, segment.color = "transparent") +  # Add player names as labels
labs(title = "FG% vs PTS for NBA Players (2021-2022 Season)",
x = "Field Goal Percentage",
y = "Points Per Game") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# Convert ggplot to plotly
scatter_plot_plotly <- ggplotly(scatter_plot, tooltip = "text")
# Create scatterplot with plotly
scatter_plot <- ggplot(data, aes(x = FG., y = PTS, label = Player)) +
geom_point() +
geom_text_repel(size = 3, segment.size = 0.2, segment.color = "transparent") +  # Add player names as labels
labs(title = "FG% vs PTS for NBA Players (2021-2022 Season)",
x = "Field Goal Percentage",
y = "Points Per Game") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# Convert ggplot to plotly
scatter_plot_plotly <- ggplotly(scatter_plot, tooltip = "text")
# Add hover event handler to display player names
scatter_plot_plotly <- onRender(
scatter_plot_plotly,
"
function(el) {
el.on('plotly_hover', function(data) {
var hoverInfo = data.points.map(function(point) {
return point.text;
});
document.getElementById('hover-info').innerHTML = hoverInfo.join('<br>');
});
el.on('plotly_unhover', function(data) {
document.getElementById('hover-info').innerHTML = '';
});
}
"
)
# Add hover event handler to display player names
scatter_plot_plotly <- onRender(
scatter_plot_plotly,
"
function(el) {
el.on('plotly_hover', function(data) {
var hoverInfo = data.points.map(function(point) {
return point.text;
});
document.getElementById('hover-info').innerHTML = hoverInfo.join('<br>');
});
el.on('plotly_unhover', function(data) {
document.getElementById('hover-info').innerHTML = '';
});
}
"
)
install.packages("htmlwidgets")
install.packages("htmlwidgets")
# Add hover event handler to display player names
scatter_plot_plotly <- onRender(
scatter_plot_plotly,
"
function(el) {
el.on('plotly_hover', function(data) {
var hoverInfo = data.points.map(function(point) {
return point.text;
});
document.getElementById('hover-info').innerHTML = hoverInfo.join('<br>');
});
el.on('plotly_unhover', function(data) {
document.getElementById('hover-info').innerHTML = '';
});
}
"
)
plotly::onRender
# Create scatterplot with plotly
scatter_plot <- ggplot(data, aes(x = FG., y = PTS, text = Player)) +
geom_point() +
labs(title = "FG% vs PTS for NBA Players (2021-2022 Season)",
x = "Field Goal Percentage",
y = "Points Per Game") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# Convert ggplot to plotly
scatter_plot_plotly <- ggplotly(scatter_plot, tooltip = "text")
# Add click event handler to display player names
scatter_plot_plotly <- event_register(scatter_plot_plotly, "plotly_click", function(event_data) {
if (!is.null(event_data)) {
player_name <- event_data[["point"]][["text"]]
update_text <- paste("Player: ", player_name)
scatter_plot_plotly %>%
layout(annotations = list(
text = update_text,
xref = "paper", yref = "paper",
x = 0.5, y = 1.05,
showarrow = FALSE
))
}
})
# Create scatterplot with plotly
scatter_plot <- ggplot(data, aes(x = FG., y = PTS, text = Player)) +
geom_point() +
labs(title = "FG% vs PTS for NBA Players (2021-2022 Season)",
x = "Field Goal Percentage",
y = "Points Per Game") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# Convert ggplot to plotly
scatter_plot_plotly <- ggplotly(scatter_plot, tooltip = "text")
# Add click event handler to display player names
scatter_plot_plotly <- event_register(scatter_plot_plotly, "plotly_click", function(event_data) {
if (!is.null(event_data)) {
player_name <- event_data[["point"]][["text"]]
update_text <- paste("Player: ", player_name)
scatter_plot_plotly %>%
layout(annotations = list(
text = update_text,
xref = "paper", yref = "paper",
x = 0.5, y = 1.05,
showarrow = FALSE
))
}
})
# Create scatterplot
scatter_plot <- ggplot(data, aes(x = FG., y = PTS, label = Player)) +
geom_point() +
geom_text_repel(size = 3, segment.size = 0.2, segment.color = "transparent") +  # Add player names as labels
labs(title = "FG% vs PTS for NBA Players (2021-2022 Season)",
x = "Field Goal Percentage",
y = "Points Per Game") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# Print scatterplot
print(scatter_plot)
data <- read.csv("21_22_data.csv")
library(ggplot2)
library(ggrepel)
library(plotly)
# Create scatterplot with customized aesthetics
scatter_plot <- ggplot(data, aes(x = FG., y = PTS)) +
geom_point(aes(size = PTS, color = FG.), alpha = 0.6) +  # Customize size and color based on PTS and FG
scale_color_gradient(low = "blue", high = "red") +  # Gradient from blue to red for FG
scale_size_continuous(range = c(3, 10)) +  # Range of circle sizes based on PTS
geom_text_repel(aes(label = Player), size = 3, segment.size = 0.2, segment.color = "transparent") +
labs(title = "FG% vs PTS for NBA Players (2021-2022 Season)",
x = "Field Goal Percentage",
y = "Points Per Game") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print scatterplot
print(scatter_plot)
data <- read.csv("21_22_data.csv")
library(ggplot2)
library(ggrepel)
library(plotly)
# Create scatterplot with customized aesthetics
scatter_plot <- ggplot(data, aes(x = FG., y = PTS)) +
geom_point(aes(size = PTS, color = FG.), alpha = 0.6) +  # Customize size and color based on PTS and FG
scale_color_gradient(low = "blue", high = "red") +  # Gradient from blue to red for FG
scale_size_continuous(range = c(1, 3)) +  # Range of circle sizes based on PTS
geom_text_repel(aes(label = Player), size = 3, segment.size = 0.2, segment.color = "transparent") +
labs(title = "FG% vs PTS for NBA Players (2021-2022 Season)",
x = "Field Goal Percentage",
y = "Points Per Game") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print scatterplot
print(scatter_plot)
data <- read.csv("21_22_data.csv")
library(ggplot2)
library(ggrepel)
library(plotly)
# Create scatterplot with customized aesthetics
scatter_plot <- ggplot(data, aes(x = FG., y = PTS)) +
geom_point(aes(size = PTS, color = FG.), alpha = 0.6) +  # Customize size and color based on PTS and FG
scale_color_gradient(low = "blue", high = "red") +  # Gradient from blue to red for FG
scale_size_continuous(range = c(1, 5)) +  # Range of circle sizes based on PTS
geom_text_repel(aes(label = Player), size = 3, segment.size = 0.2, segment.color = "transparent") +
labs(title = "FG% vs PTS for NBA Players (2021-2022 Season)",
x = "Field Goal Percentage",
y = "Points Per Game") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print scatterplot
print(scatter_plot)
data <- read.csv("21_22_data.csv")
library(ggplot2)
library(ggrepel)
library(plotly)
# Create scatterplot with customized aesthetics
scatter_plot <- ggplot(data, aes(x = FG., y = PTS)) +
geom_point(aes(size = PTS, color = FG.), alpha = 0.6) +  # Customize size and color based on PTS and FG
scale_color_gradient(low = "blue", mid = NULL,  high = "red") +  # Gradient from blue to red for FG
scale_size_continuous(range = c(1, 5)) +  # Range of circle sizes based on PTS
geom_text_repel(aes(label = Player), size = 3, segment.size = 0.2, segment.color = "transparent") +
labs(title = "FG% vs PTS for NBA Players (2021-2022 Season)",
x = "Field Goal Percentage",
y = "Points Per Game") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data <- read.csv("21_22_data.csv")
library(ggplot2)
library(ggrepel)
library(plotly)
# Create scatterplot with customized aesthetics
scatter_plot <- ggplot(data, aes(x = FG., y = PTS)) +
geom_point(aes(size = PTS, color = FG.), alpha = 0.6) +  # Customize size and color based on PTS and FG
scale_color_gradient(low = "blue", high = "red", limits = c(0, 1), breaks = c(0, 0.5, 1)) +  # Gradient from blue to red for FG
scale_size_continuous(range = c(1, 5)) +  # Range of circle sizes based on PTS
geom_text_repel(aes(label = Player), size = 3, segment.size = 0.2, segment.color = "transparent") +
labs(title = "FG% vs PTS for NBA Players (2021-2022 Season)",
x = "Field Goal Percentage",
y = "Points Per Game") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print scatterplot
print(scatter_plot)
data <- read.csv("21_22_data.csv")
library(ggplot2)
library(ggrepel)
library(plotly)
# Create scatterplot with customized aesthetics
scatter_plot <- ggplot(data, aes(x = FG., y = PTS)) +
geom_point(aes(size = PTS, color = FG.), alpha = 0.6) +  # Customize size and color based on PTS and FG
scale_color_gradient(low = "blue", high = "red", limits = c(0, 1), breaks = c(0, 0.5, 1)) +  # Gradient from blue to red for FG with adjusted limits and breaks
scale_size_continuous(range = c(1, 6)) +  # Adjusted range of circle sizes based on PTS
geom_text_repel(aes(label = Player), size = 3, segment.size = 0.2, segment.color = "transparent") +
labs(title = "FG% vs PTS for NBA Players (2021-2022 Season)",
x = "Field Goal Percentage",
y = "Points Per Game") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Field Goal Percentage") +  # Adding x-axis label
ylab("Points Per Game")          # Adding y-axis label
# Print scatterplot
print(scatter_plot)
data <- read.csv("21_22_data.csv")
library(ggplot2)
library(ggrepel)
library(plotly)
# Create scatterplot with customized aesthetics
scatter_plot <- ggplot(data, aes(x = FG., y = PTS)) +
geom_point(aes(size = PTS, color = FG.), alpha = 0.6) +  # Customize size and color based on PTS and FG
scale_color_gradient(low = "blue", high = "red", limits = c(0, 1), breaks = c(0, 0.5, 1)) +  # Gradient from blue to red for FG with adjusted limits and breaks
scale_size_continuous(range = c(1, 6)) +  # Adjusted range of circle sizes based on PTS
labs(title = "FG% vs PTS for NBA Players (2021-2022 Season)",
x = "Field Goal Percentage",
y = "Points Per Game") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Field Goal Percentage") +  # Adding x-axis label
ylab("Points Per Game") +        # Adding y-axis label
annotate("text", x = 0.5, y = -0.1, label = "Low FG%", color = "blue") +
annotate("text", x = 0.9, y = -0.1, label = "High FG%", color = "red") +
annotate("text", x = -0.1, y = 50, label = "Low PTS", color = "blue", angle = 90) +
annotate("text", x = -0.1, y = 100, label = "High PTS", color = "red", angle = 90)
# Print scatterplot
print(scatter_plot)
data <- read.csv("21_22_data.csv")
library(ggplot2)
library(ggrepel)
library(plotly)
# Create scatterplot with customized aesthetics
scatter_plot <- ggplot(data, aes(x = FG., y = PTS)) +
geom_point(aes(size = PTS, color = FG.), alpha = 0.6) +  # Customize size and color based on PTS and FG
scale_color_gradient(low = "blue", high = "red", limits = c(0, 1), breaks = c(0, 0.5, 1)) +  # Gradient from blue to red for FG with adjusted limits and breaks
scale_size_continuous(range = c(1, 6)) +  # Adjusted range of circle sizes based on PTS
labs(title = "FG% vs PTS for NBA Players (2021-2022 Season)",
x = "Field Goal Percentage",
y = "Points Per Game") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Field Goal Percentage") +  # Adding x-axis label
ylab("Points Per Game") +        # Adding y-axis label
annotate("text", x = 0.5, y = -0.1, label = "Low FG%", color = "blue") +
annotate("text", x = 0.9, y = -0.1, label = "High FG%", color = "red") +
annotate("text", x = -0.1, y = 35, label = "High PTS", color = "red", angle = 90)
# Setting the y-axis limit to 35
scatter_plot <- scatter_plot + scale_y_continuous(limits = c(0, 35))
# Print scatterplot
print(scatter_plot)
data <- read.csv("21_22_data.csv")
library(ggplot2)
library(ggrepel)
library(plotly)
# Create scatterplot with customized aesthetics
scatter_plot <- ggplot(data, aes(x = FG., y = PTS)) +
geom_point(aes(size = PTS, color = FG.), alpha = 0.6) +  # Customize size and color based on PTS and FG
scale_color_gradient(low = "blue", high = "red", limits = c(0, 1), breaks = c(0, 0.5, 1)) +  # Gradient from blue to red for FG with adjusted limits and breaks
scale_size_continuous(range = c(1, 6)) +  # Adjusted range of circle sizes based on PTS
labs(title = "FG% vs PTS for NBA Players (2021-2022 Season)",
x = "Field Goal Percentage",
y = "Points Per Game") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Field Goal Percentage") +  # Adding x-axis label
ylab("Points Per Game") +        # Adding y-axis label
annotate("text", x = 0, y = 0, label = "Low FG%", color = "blue") +
annotate("text", x = 0.9, y = 0, label = "High FG%", color = "red") +
annotate("text", x = 0, y = 30, label = "High PTS", color = "red", angle = 90)
# Setting the y-axis limit to 35
scatter_plot <- scatter_plot + scale_y_continuous(limits = c(0, 35))
# Print scatterplot
print(scatter_plot)
data <- read.csv("21_22_data.csv")
library(ggplot2)
library(ggrepel)
library(plotly)
# Create scatterplot with customized aesthetics
scatter_plot <- ggplot(data, aes(x = FG., y = PTS)) +
geom_point(aes(size = PTS, color = FG.), alpha = 0.6) +  # Customize size and color based on PTS and FG
scale_color_gradient(low = "blue", high = "red", limits = c(0, 1), breaks = c(0, 0.5, 1)) +  # Gradient from blue to red for FG with adjusted limits and breaks
scale_size_continuous(range = c(1, 6)) +  # Adjusted range of circle sizes based on PTS
labs(title = "FG% vs PTS for NBA Players (2021-2022 Season)",
x = "Field Goal Percentage",
y = "Points Per Game") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Field Goal Percentage") +  # Adding x-axis label
ylab("Points Per Game") +        # Adding y-axis label +
annotate("text", x = 0.9, y = 0, label = "High FG%", color = "red") +
annotate("text", x = 0, y = 30, label = "High PTS", color = "red", angle = 90)
# Setting the y-axis limit to 35
scatter_plot <- scatter_plot + scale_y_continuous(limits = c(0, 35))
# Print scatterplot
print(scatter_plot)
data <- read.csv("21_22_data.csv")
library(ggplot2)
library(ggrepel)
library(plotly)
# Create scatterplot with customized aesthetics
scatter_plot <- ggplot(data, aes(x = FG., y = PTS)) +
geom_point(aes(size = PTS, color = FG.), alpha = 0.6) +  # Customize size and color based on PTS and FG
scale_size_continuous(range = c(1, 6)) +  # Adjusted range of circle sizes based on PTS
labs(title = "FG% vs PTS for NBA Players (2021-2022 Season)",
x = "Field Goal Percentage",
y = "Points Per Game") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Field Goal Percentage") +  # Adding x-axis label
ylab("Points Per Game") +        # Adding y-axis label +
annotate("text", x = 0.9, y = 0, label = "High FG%", color = "red") +
annotate("text", x = 0, y = 30, label = "High PTS", color = "red", angle = 90)
# Setting the y-axis limit to 35
scatter_plot <- scatter_plot + scale_y_continuous(limits = c(0, 35))
# Print scatterplot
print(scatter_plot)
data <- read.csv("21_22_data.csv")
library(ggplot2)
library(ggrepel)
library(plotly)
# Create scatterplot with customized aesthetics
scatter_plot <- ggplot(data, aes(x = FG., y = PTS)) +
geom_point(aes(size = PTS), fill = "black", color = "black", alpha = 0.6) +  # Filled black points with black outline
scale_size_continuous(range = c(0.5, 3)) +  # Adjusted range of circle sizes based on PTS
labs(title = "FG% vs PTS for NBA Players (2021-2022 Season)",
x = "Field Goal Percentage",
y = "Points Per Game") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Field Goal Percentage") +  # Adding x-axis label
ylab("Points Per Game") +        # Adding y-axis label +
annotate("text", x = 0.9, y = 0, label = "High FG%", color = "red") +
annotate("text", x = 0, y = 30, label = "High PTS", color = "red", angle = 90)
# Setting the y-axis limit to 35
scatter_plot <- scatter_plot + scale_y_continuous(limits = c(0, 35))
# Print scatterplot
print(scatter_plot)
data <- read.csv("21_22_data.csv")
library(ggplot2)
library(ggrepel)
library(plotly)
# Create scatterplot with customized aesthetics
scatter_plot <- ggplot(data, aes(x = FG., y = PTS)) +
geom_point(aes(size = PTS), fill = "black", color = "black", alpha = 0.6) +  # Filled black points with black outline
scale_size_continuous(range = c(0.5, 3)) +  # Adjusted range of circle sizes based on PTS
labs(title = "FG% vs PTS for NBA Players (2021-2022 Season)",
x = "Field Goal Percentage",
y = "Points Per Game") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Field Goal Percentage") +  # Adding x-axis label
ylab("Points Per Game") +        # Adding y-axis label +
annotate("text", x = 0.9, y = 0, label = "High FG%", color = "red") +
annotate("text", x = 0, y = 30, label = "High PTS", color = "red", angle = 90)
# Setting the y-axis limit to 35
scatter_plot <- scatter_plot + scale_y_continuous(limits = c(0, 35))
# Print scatterplot
print(scatter_plot)
install.packages("devtools")
devtools::install_github("djperrenoud/carsimr.perrenoud")
devtools::install_github("djperrenoud/carsimr.perrenoud")
data <- read.csv("21_22_data.csv")
library(ggplot2)
library(ggrepel)
library(plotly)
# Create scatterplot with customized aesthetics
scatter_plot <- ggplot(data, aes(x = FG., y = PTS)) +
geom_point(aes(size = PTS), fill = "black", color = "black", alpha = 0.6) +  # Filled black points with black outline
scale_size_continuous(range = c(0.5, 3)) +  # Adjusted range of circle sizes based on PTS
labs(title = "FG% vs PTS for NBA Players (2021-2022 Season)",
x = "Field Goal Percentage",
y = "Points Per Game") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Field Goal Percentage") +  # Adding x-axis label
ylab("Points Per Game") +        # Adding y-axis label +
annotate("text", x = 0.9, y = 0, label = "High FG%", color = "red") +
annotate("text", x = 0, y = 30, label = "High PTS", color = "red", angle = 90)
# Setting the y-axis limit to 35
scatter_plot <- scatter_plot + scale_y_continuous(limits = c(0, 35))
# Print scatterplot
print(scatter_plot)
View(data)
library(reticulate)
source_python("linear_regression.py")
reticulate::py_install("pandas")
source_python("linear_regression.py")
reticulate::py_install("sklearn")
reticulate::py_install("scikit-learn")
source_python("linear_regression.py")
reticulate::py_install("matplotlib")
source_python("linear_regression.py")
source_python("linear_regression.py", convert = FALSE)
reticulate::py_last_error()
devtools::load_all(".")
source_python("linear_regression.py", convert = FALSE)
devtools::load_all(".")
source_python("linear_regression.py", convert = FALSE)
devtools::load_all(".")
source_python("linear_regression.py", convert = FALSE)
devtools::load_all(".")
source_python("linear_regression.py", convert = FALSE)
devtools::load_all(".")
source_python("linear_regression.py", convert = FALSE)
devtools::load_all(".")
source_python("linear_regression.py", convert = FALSE)
?r2_score
devtools::load_all(".")
source_python("linear_regression.py", convert = FALSE)
source_python("linear_regression.py")
pkgbuild::check_build_tools(debug = TRUE)
devtools::load_all(".")
rm(list = c("LinearRegression", "r2_score", "train_test_split"))
source_python("knn.py")
reticulate::install_python("seaborn")
source_python("knn.py")
devtools::load_all(".")
source_python("knn.py")
source_python("knn.py")
devtools::load_all(".")
source_python("knn.py")
devtools::load_all(".")
rm(list = c("accuracy_score", "confusion_matrix", "KNeighborsClassifier", "LabelEncoder", "LinearRegression", "r2_score",
"train_test_split"))
source_python("knn.py")
devtools::load_all(".")
rm(list = c("accuracy_score", "confusion_matrix", "KNeighborsClassifier", "LabelEncoder", "LinearRegression", "r2_score",
"train_test_split"))
source_python("knn.py")
devtools::load_all(".")
rm(list = c("accuracy_score", "confusion_matrix", "KNeighborsClassifier", "LabelEncoder", "LinearRegression", "r2_score",
"train_test_split"))
devtools::load_all(".")
source_python("knn.py")
devtools::load_all(".")
source_python("knn.py")
devtools::load_all(".")
rm(list = c("accuracy_score", "confusion_matrix", "KNeighborsClassifier", "KNeighborsRegressor", "LabelEncoder",
"LinearRegression", "mean_squared_error", "r2_score", "train_test_split"))
# Run linear regression model in python
source_python("linear_regression.py")
source_python("knn.py")
devtools::load_all(".")
rm(list = c("accuracy_score", "confusion_matrix", "KNeighborsClassifier", "KNeighborsRegressor", "LabelEncoder",
"LinearRegression", "mean_squared_error", "r2_score", "train_test_split"))
source_python("random_forest.py")
usethis::use_readme_rmd()
usethis::use_namespace()
usethis::use_namespace()
devtools::load_all(".")
document()
library(devtools)
document()
devtools::load_all(".")
document()
document()
use_agpl3_license()
